#include <LiquidCrystal.h>

#define BUTTON_OK 6
#define BUTTON_CANCEL 7
#define BUTTON_PREV 8
#define BUTTON_NEXT 9

enum Buttons {
  EV_OK,
  EV_CANCEL,
  EV_NEXT,
  EV_PREV,
  EV_NONE,
  EV_MAX_NUM
};

enum Menus {
  MENU_MAIN = 0,
  MENU_KP,
  MENU_TEMP,
  MENU_MAX_NUM
};

LiquidCrystal lcd(12, 11, 5, 4, 3, 2);
  double kp = 1, ki = 0.1, kd = 0.1; // exemplu valori

  double temp, temp_senzor, output, moving_sp, uptime, timp_inc, timp_rac, timp_men;

  double eroare= 0;

  double suma_erori= 0;

  double eroare_anterioara = 0;

  double derivativa = 0;

  double dt; // timp esantionare

  double setpoint = 30;

  float time, prevtime;
    int sw=0;

 
Menus scroll_menu = MENU_MAIN;
Menus current_menu =  MENU_MAIN;

void state_machine(enum Menus menu, enum Buttons button);
Buttons GetButtons(void);
void print_menu(enum Menus menu);

typedef void (state_machine_handler_t)(void);

void print_menu(enum Menus menu)
{
  lcd.clear();
  switch(menu)
  {
    case MENU_KP:
        lcd.print("KP = ");
        lcd.print(kp);
        break;
    case MENU_TEMP:
        lcd.print("TEMP = ");
        lcd.print(temp);
        break;
    case MENU_MAIN:
    default:
        lcd.print("PS 2020");
           break;
  }
  if(current_menu != MENU_MAIN)
  {
      lcd.setCursor(0,1);
      lcd.print("modifica");
  }
}

void enter_menu(void)
{
  current_menu = scroll_menu;
}

void go_home(void)
{
  scroll_menu = MENU_MAIN;
  current_menu = scroll_menu;
}

void go_next(void)
{
  scroll_menu = (Menus) ((int)scroll_menu + 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}

void go_prev(void)
{
  scroll_menu = (Menus) ((int)scroll_menu - 1);
  scroll_menu = (Menus) ((int)scroll_menu % MENU_MAX_NUM);
}

void save_kp(void)
{
}

void inc_kp(void)
{
  kp++;
}

void dec_kp(void)
{
  kp--;
}

void save_temp(void)
{
}

void inc_temp(void)
{
  temp++;
}

void dec_temp(void)
{
  temp--;
}


state_machine_handler_t* sm[MENU_MAX_NUM][EV_MAX_NUM] = 
{ //events: OK , CANCEL , NEXT, PREV
  {enter_menu, go_home, go_next, go_prev},  // MENU_MAIN
  {go_home, go_home, inc_kp, dec_kp},       // MENU_KP
  {go_home, go_home, inc_temp, dec_temp},   // MENU_TEMP
};

void state_machine(enum Menus menu, enum Buttons button)
{
  sm[menu][button]();
}

Buttons GetButtons(void)
{
  enum Buttons ret_val = EV_NONE;
  if (digitalRead(BUTTON_OK))
  {
    ret_val = EV_OK;
  }
  else if (digitalRead(BUTTON_CANCEL))
  {
    ret_val = EV_CANCEL;
  }
  else if (digitalRead(BUTTON_NEXT))
  {
    ret_val = EV_NEXT;
  }
  else if (digitalRead(BUTTON_PREV))
  {
    ret_val = EV_PREV;
  }
  Serial.print(ret_val);
  return ret_val;
}

void initPins_PWM()
{
DDRB|=0x4;
}

void init_Timer0() 
{
    cli();
    TCCR0A = TCCR0B = 0;
    TCCR0A |= (1 << WGM01) | (1 << WGM00) | (1 << COM0A1) | (1 << COM0B1);
    TCCR0B |= (1 << CS00)|(0 << CS01)|(0 << CS02);
    sei();
}



void init_ADC()
{
    ADCSRA |= ((1 << ADPS2) | (1 << ADPS1) | (1 << ADPS0));//set division factor between system clock frequency and the input clock to the ADC- 128
    ADMUX |= (1 << REFS0);//AVcc with external capacitor at Aref pin
    ADCSRA |= (1 << ADEN);//enable ADC
    ADCSRA |= (1 << ADSC);//ADC start conversion
}

uint16_t read_ADC(uint8_t channel)
{
    ADMUX &= 0xF0;//set input A0 - A5
    ADMUX |= channel;//select chanel A0 to A5
    ADCSRA |= (1 << ADSC);//start conversion
    while(ADCSRA & (1 << ADSC));//wait wile adc conversion are not updated
    return ADCW;//read and return voltage
}
float read_temp()//read and return temperature
{
float voltage=0;
float Temperature=0;
float temperatureCelsius=0; int reading;
reading=read_ADC(0); 
voltage=reading*5.0; voltage/=1024.0;
temperatureCelsius=(voltage-0.5)*100; 
return temperatureCelsius;
}

int pid()

{    

    temp_senzor=read_temp();
  
    dt=(time-prevtime)/1000;

    eroare = setpoint - temp_senzor;

    suma_erori= suma_erori + eroare * dt;

    derivativa = (eroare - eroare_anterioara) / dt;

    output = (kp * eroare) + (ki * suma_erori ) + (kd * derivativa);

    OCR1B=output;

    eroare_anterioara = eroare;
  
      return prevtime+time;

}




void afisare_timp()
{
int min=0;
int sec=0;
int remaining=0;
lcd.setCursor(0,1);
lcd.print("P:");
lcd.print(moving_sp);
if(uptime<=timp_inc)
{
lcd.print("TINC: ");
remaining=timp_inc-uptime;
moving_sp=temp*(timp_inc-remaining);
}
else if(uptime<=(timp_inc+timp_men))
{
lcd.print("TMen: ");
remaining=(timp_inc+timp_men)-uptime;

}

else if(uptime<=(timp_inc+timp_men+timp_rac))
{
lcd.print("TRac: ");
remaining=(timp_inc+timp_men+timp_rac)-uptime;
moving_sp=temp-temp*(timp_inc-remaining)/timp_rac;
}
else 
{
lcd.print("Oprit: ");
}
min=remaining/60;
sec=remaining%60;
lcd.print(min);
lcd.print(":");
lcd.print(sec);
}







void setup()
{
  Serial.begin(9600);
  init_Timer0();
  initPins_PWM();
  lcd.begin(16,2);
  pinMode(6, INPUT);
  digitalWrite(6, LOW); // pull-down
    pinMode(7, INPUT);
  digitalWrite(7, LOW); // pull-down
    pinMode(8, INPUT);
  digitalWrite(8, LOW); // pull-down
    pinMode(9, INPUT);
  digitalWrite(9, LOW); // pull-down
}

void loop()
{
  volatile Buttons event = GetButtons();
  if (event != EV_NONE)
  {
    state_machine(current_menu, event);
  }
    print_menu(scroll_menu);
    delay(1000);
}
 
